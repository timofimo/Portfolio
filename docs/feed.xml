<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/portfolio/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/portfolio/" rel="alternate" type="text/html" /><updated>2017-12-18T14:22:45+01:00</updated><id>http://localhost:4000/portfolio/</id><title type="html">Timo van Hees - Portfolio</title><subtitle>Portfolio page of Timo van Hees. Graphics programmer studying at IGAD.</subtitle><entry><title type="html">Exiles of Auriga</title><link href="http://localhost:4000/portfolio/game%20project/engine%20project/team%20project/2017/11/22/ExilesOfAuriga.html" rel="alternate" type="text/html" title="Exiles of Auriga" /><published>2017-11-22T19:35:00+01:00</published><updated>2017-11-22T19:35:00+01:00</updated><id>http://localhost:4000/portfolio/game%20project/engine%20project/team%20project/2017/11/22/ExilesOfAuriga</id><content type="html" xml:base="http://localhost:4000/portfolio/game%20project/engine%20project/team%20project/2017/11/22/ExilesOfAuriga.html">&lt;p&gt;The assignment for my fourth block in my second year at IGAD was to create a game with the engine we created in the previous blocks. We were one of three engine teams that went all the way to the end of the year. We would be working in teams of 16. With people from multiple disciplines.&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;video&quot;&gt;&lt;figure&gt;&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/3L5043p6jw8&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Yes!!! We made it to the end of the year. We made a game in an engine that was build from scratch.&lt;/p&gt;

&lt;p&gt;The player is the commander of his own fleet. While he is in the bridge overseeing his operations, he receives a warning that enemy ships are approaching. He selects the ships he needs to defeat the incoming threat. Then he jumps into the action. Using advanced holographic technology he is put in the middle of the fight. From this view he can oversee the battlefield and control his fleet to defeat the enemy.&lt;/p&gt;

&lt;!-- Jekyll Ideal Image Slider Include --&gt;
&lt;!-- https://github.com/jekylltools/jekyll-ideal-image-slider-include --&gt;
&lt;!-- v1.8 --&gt;
&lt;div id=&quot;exiles_of_auriga_images&quot; class=&quot;image_slider&quot;&gt;
  &lt;img data-src=&quot;&quot; data-src-2x=&quot;&quot; src=&quot;/portfolio/assets/images/Exiles%20of%20Auriga/Screenshot_Bridge.png&quot; title=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;&quot; data-src-2x=&quot;&quot; src=&quot;/portfolio/assets/images/Exiles%20of%20Auriga/Screenshot_Bridge_2.png&quot; title=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;&quot; data-src-2x=&quot;&quot; src=&quot;/portfolio/assets/images/Exiles%20of%20Auriga/Screenshot_SpaceScene_1.png&quot; title=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;&quot; data-src-2x=&quot;&quot; src=&quot;/portfolio/assets/images/Exiles%20of%20Auriga/Screenshot_SpaceScene_2.png&quot; title=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;&quot; data-src-2x=&quot;&quot; src=&quot;/portfolio/assets/images/Exiles%20of%20Auriga/Screenshot_SpaceScene_3.png&quot; title=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;/div&gt;

&lt;p&gt;At the start of the block we ran into a couple of problems. The tools were buggy and incomplete and the physics system was bottlenecking our game. I took over as our physics programmer and was still the only graphics programmer on the team. I spent the first weeks trying to speed up our custom physics engine. Then I spent most of my time fixing and adding new features in some of our tools. Of course I also helped by implementing new components and adding new gameplay elements.&lt;/p&gt;

&lt;h3&gt;My work&lt;/h3&gt;
&lt;h4&gt;Physics optimization&lt;/h4&gt;
&lt;p&gt;Going into this block the physics system was complete but slow. Our implementation of an octree which we used for spatial partitioning turned out to be incredibly slow. Yet we couldn’t find anything wrong with it. For comparison I implemented a BVH tree. The BVH tree turned out to be up to 300% faster. It also allowed us to do ray casts and insertion queries more easily. So we replaced the octree with a BVH tree. This made the physics system less of a bottleneck.&lt;/p&gt;

&lt;h4&gt;Tools&lt;/h4&gt;
&lt;p&gt;I spent a lot of time bugfixing and polishing the tools. The biggest undertaking was making the renderer work for the scene editor. The scene editor used a different scene graph and component system compared to the main engine. It took a couple of attempts to before everything worked as intended.&lt;/p&gt;

&lt;h4&gt;Gun&lt;/h4&gt;
&lt;p&gt;Just for fun we added a gun to the bridge that the player could pick up and shoot.&lt;/p&gt;

&lt;h3&gt;Rewards&lt;/h3&gt;
&lt;p&gt;The teachers awarded our team with the Best Game Programming award for this year.
&lt;img src=&quot;/portfolio/assets/images/Exiles%20of%20Auriga/Award.jpg&quot; alt=&quot;Award&quot; class=&quot;post_image&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">The assignment for my fourth block in my second year at IGAD was to create a game with the engine we created in the previous blocks. We were one of three engine teams that went all the way to the end of the year. We would be working in teams of 16. With people from multiple disciplines.</summary></entry><entry><title type="html">Jackal Engine V2</title><link href="http://localhost:4000/portfolio/engine%20project/team%20project/2017/11/22/JackalEngineV2.html" rel="alternate" type="text/html" title="Jackal Engine V2" /><published>2017-11-22T19:29:00+01:00</published><updated>2017-11-22T19:29:00+01:00</updated><id>http://localhost:4000/portfolio/engine%20project/team%20project/2017/11/22/JackalEngineV2</id><content type="html" xml:base="http://localhost:4000/portfolio/engine%20project/team%20project/2017/11/22/JackalEngineV2.html">&lt;p&gt;The assignment for my third block in my second year at IGAD was to create a game engine focused on a specific game genre. We were one of the engine teams that were allowed to continue working on their engine this block. We got a few extra members and added virtual reality to the project description.&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;video&quot;&gt;&lt;figure&gt;&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/-suy5nI2_uY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;With the new team members I was still the only graphics programmer on the team. We were now a group of 7 programmers.&lt;/p&gt;

&lt;p&gt;We changed our target game to be a 3D space RTS in VR for this block. We added VR because the teachers, designers and artists all showed a lot of interest in such a project.&lt;/p&gt;

&lt;p&gt;I learned some new tricks since the end of the last block that I wanted to try out. Because of VR we also wanted to switch to a forward renderer so we could use MSAA. Because of this I rewrote the entire renderer. Since I was rewriting it anyway I figured that we might as well switch to OpenGL. With the help of OpenVR we had our engine working with the HTC Vive in less than two weeks. The rest of the block I spent my time optimizing the rendering pipeline and adding all the features we thought we were going to need to make a game with our engine.&lt;/p&gt;

&lt;h3&gt;My work&lt;/h3&gt;
&lt;h4&gt;OpenGL renderer&lt;/h4&gt;
&lt;p&gt;Much like the DirectX11 renderer from last block I made use of uniform buffers, instancing, batching and draw call sorting to make every draw call as efficient as possible. This time we were going for a forward renderer instead of a deferred renderer. This eventually became a forward+ renderer.&lt;/p&gt;

&lt;h4&gt;HTC Vive&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/portfolio/assets/images/Jackal%20Engine%20v2/Screenshot.png&quot; alt=&quot;Screenshot&quot; class=&quot;post_image&quot; /&gt;
We only targeted the HTC Vive because it was the only VR headset available to us for this block and we wanted to make use of the room scale tracking. Rendering to a VR headset and tracking the players movements turned out to be incredible easy. With the OpenVR SDK this only took a couple of days.&lt;/p&gt;

&lt;p&gt;Since it’s very important to stay above 90fps and because of the high resolutions we were working with I had to spent some extra time optimizing the renderer. I used an occlusion mesh to stop the game from rendering unseen pixels. I played with different resolution render targets and upscaling techniques.&lt;/p&gt;

&lt;h4&gt;Order independent transparency&lt;/h4&gt;
&lt;p&gt;We wanted to have a lot of effects in our game such as explosions, lasers and engine trails. Because of the fully dynamic scenes we were aiming for we couldn’t reliably sort them from back to front. This meant that we couldn’t render our transparent objects the conventional way. Because of that I decided to implement &lt;a href=&quot;http://casual-effects.blogspot.nl/2015/03/implemented-weighted-blended-order.html&quot;&gt;Weighted, blended order independent transparency&lt;/a&gt;. The techniques is definitely not without its problems but it ended up fitting our needs very well.&lt;/p&gt;

&lt;h4&gt;Component based particle systems&lt;/h4&gt;
&lt;p&gt;Since our game was going to have a lot of effects we needed a good way to make them editable by the artists. To accomplish this I implemented component based particle system based on &lt;a href=&quot;http://www.bfilipek.com/2014/04/flexible-particle-system-start.html&quot;&gt;this&lt;/a&gt; blog post. By using this we could mix and match any number of generators, emitters and updaters to create a lot of different particle systems. Performance wasn’t an issue. A team member later created a visual particle editor to expose this system.&lt;/p&gt;

&lt;h4&gt; Tools&lt;/h4&gt;
&lt;p&gt;During the first block the tool programmers used QT to create their editors. They hated QT so much that we had to find a replacement. I implemented &lt;a href=&quot;https://github.com/vurtun/nuklear&quot;&gt;Nuklear&lt;/a&gt; in our engine and made a small demo project to check how usable it was. I could create an entire tool in just two days using it. This was a big step up from QT and it had the added benefit that everything was in-process. This made it way easier to expose the renderer to the tools. We ended up using it for the next two blocks. Our entire asset pipeline was made using Nuklear.&lt;/p&gt;</content><author><name></name></author><summary type="html">The assignment for my third block in my second year at IGAD was to create a game engine focused on a specific game genre. We were one of the engine teams that were allowed to continue working on their engine this block. We got a few extra members and added virtual reality to the project description.</summary></entry><entry><title type="html">Tower Complex</title><link href="http://localhost:4000/portfolio/game%20project/team%20project/2017/11/22/TowerComplex.html" rel="alternate" type="text/html" title="Tower Complex" /><published>2017-11-22T19:09:00+01:00</published><updated>2017-11-22T19:09:00+01:00</updated><id>http://localhost:4000/portfolio/game%20project/team%20project/2017/11/22/TowerComplex</id><content type="html" xml:base="http://localhost:4000/portfolio/game%20project/team%20project/2017/11/22/TowerComplex.html">&lt;p&gt;The assignment for my second block in my second year at IGAD was to create three games based on a specific themes, in a single block. We would be working together in groups of 9. With people from multiple disciplines.&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;video&quot;&gt;&lt;figure&gt;&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/naDYJBg_AjY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;The teachers called each game project a marmalade. For all marmelades we would have to come up with our own concept. The theme for the third marmalade was this image&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/images/Tower%20Complex/Theme.jpg&quot; alt=&quot;Theme&quot; class=&quot;post_image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We saw demons and heaven. We interpreted this as fallen angels and Valhalla. Our game is about Vikings trying to get into Valhalla. It’s a 4 player competitive co-op game. You can’t reach Valhalla by yourself. You need the help of the other players but only the first player who reaches Valhalla wins. This combined with very hectic gameplay made our game very enjoyable. Again, we got a lot of positive feedback on our game.&lt;/p&gt;

&lt;p&gt;This marmalade I was the scrum master of the group. It didn’t exactly go well but I learned a lot from doing it. Other than that I helped with programming or bug-fixing wherever possible.&lt;/p&gt;</content><author><name></name></author><summary type="html">The assignment for my second block in my second year at IGAD was to create three games based on a specific themes, in a single block. We would be working together in groups of 9. With people from multiple disciplines.</summary></entry><entry><title type="html">Human Complex</title><link href="http://localhost:4000/portfolio/game%20project/team%20project/2017/11/22/HumanComplex.html" rel="alternate" type="text/html" title="Human Complex" /><published>2017-11-22T19:07:00+01:00</published><updated>2017-11-22T19:07:00+01:00</updated><id>http://localhost:4000/portfolio/game%20project/team%20project/2017/11/22/HumanComplex</id><content type="html" xml:base="http://localhost:4000/portfolio/game%20project/team%20project/2017/11/22/HumanComplex.html">&lt;p&gt;The assignment for my second block in my second year at IGAD was to create three games based on a specific themes, in a single block. We would be working together in groups of 9. With people from multiple disciplines.&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;video&quot;&gt;&lt;figure&gt;&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/S4IFG7VTcso&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;The teachers called each game project a marmalade. For all marmelades we would have to come up with our own concept. The theme for the second marmalade was &lt;strong&gt;cognitive dissonance&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Our game was called Human Complex. In essence it’s a democracy simulator. You get one proposal after another and you select if you want to accept or decline the proposal. Based on your decisions some parties will love you and other will hate you. You have to try to find the right balance. The game was created in less than 2.5 weeks using Unreal Engine 4.&lt;/p&gt;

&lt;p&gt;I made most of the UI and the background systems controlling the base game logic. Making this game in Unreal proved to be more difficult than expected. Again we got very positive feedback on our game.&lt;/p&gt;</content><author><name></name></author><summary type="html">The assignment for my second block in my second year at IGAD was to create three games based on a specific themes, in a single block. We would be working together in groups of 9. With people from multiple disciplines.</summary></entry><entry><title type="html">God Complex</title><link href="http://localhost:4000/portfolio/game%20project/team%20project/2017/11/22/GodComplex.html" rel="alternate" type="text/html" title="God Complex" /><published>2017-11-22T19:04:00+01:00</published><updated>2017-11-22T19:04:00+01:00</updated><id>http://localhost:4000/portfolio/game%20project/team%20project/2017/11/22/GodComplex</id><content type="html" xml:base="http://localhost:4000/portfolio/game%20project/team%20project/2017/11/22/GodComplex.html">&lt;p&gt;The assignment for my second block in my second year at IGAD was to create three games based on a specific themes, in a single block. We would be working together in groups of 9. With people from multiple disciplines.&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;video&quot;&gt;&lt;figure&gt;&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/TDklpIfx2qU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;The teachers called each game project a marmalade. For all marmelades we would have to come up with our own concept. The theme for the first marmalade was &lt;strong&gt;Custom controller&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Our game was called God Complex. It’s about an angry God who is stomping the puny villagers beneath his (many) feet! The game and the controller were created in less than two weeks.&lt;/p&gt;

&lt;p&gt;I made the controller. A giant cardboard mat with 12 foot sized pressure plates. The pressure plates are layed out the same way as the grid you see on screen. The board is controlled by and Arduino that is connected to the PC through an USB port. I’m not particularly handy and I made some questionable choices when it comes to the materials we used but I’m happy to say that 9 out the 12 pressure plates worked.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/images/God%20Complex/Board.png&quot; alt=&quot;Board&quot; class=&quot;post_image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We got very positive feedback on our game. People had a lot of fun dancing on our dancing mat.&lt;/p&gt;</content><author><name></name></author><summary type="html">The assignment for my second block in my second year at IGAD was to create three games based on a specific themes, in a single block. We would be working together in groups of 9. With people from multiple disciplines.</summary></entry><entry><title type="html">Jackal Engine V1</title><link href="http://localhost:4000/portfolio/engine%20project/team%20project/2017/11/22/JackalEngineV1.html" rel="alternate" type="text/html" title="Jackal Engine V1" /><published>2017-11-22T17:59:00+01:00</published><updated>2017-11-22T17:59:00+01:00</updated><id>http://localhost:4000/portfolio/engine%20project/team%20project/2017/11/22/JackalEngineV1</id><content type="html" xml:base="http://localhost:4000/portfolio/engine%20project/team%20project/2017/11/22/JackalEngineV1.html">&lt;p&gt;The assignment for my first block in my second year at IGAD was to create a game engine focused on a specific game genre.  We would be working together in groups of 4, all programmers. We picked 3D space RTS as our genre inspired by games such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Homeworld&quot;&gt;Homeworld&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The best engines would be allowed to continue to block C. The best of those would be used to create a game in block D of the same year. I would be working as a graphics programmer together with one engine programmer and two tool programmers.&lt;/p&gt;

&lt;p&gt;This block I would be working with DirectX 11 for the first time in years. It took me a couple of days to translate my knowledge of OpenGL to DirectX but it didn’t take long to get a deferred renderer up and running. The rest of the block I spent most of my time optimizing the renderer and implementing post processing effects.&lt;/p&gt;
&lt;h3&gt;My work&lt;/h3&gt;
&lt;h4&gt;DirectX 11 renderer&lt;/h4&gt;
&lt;p&gt;For this block I wrote an all new DirectX 11 renderer. I made extensive use of constant buffers, instancing, batching and draw call sorting to make every draw call as efficient as possible.&lt;/p&gt;

&lt;h4&gt;View frustum culling&lt;/h4&gt;
&lt;p&gt;To further improve the performance of our rendering pipeline I tried view frustum culling. It gave us a huge boost in performance in most scenarios. I don’t think I will ever make a renderer without it anymore.&lt;/p&gt;

&lt;h4&gt;Bloom&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/portfolio/assets/images/Jackal%20Engine%20V1/Bloom.png&quot; alt=&quot;Bloom&quot; class=&quot;post_image&quot; /&gt;
To make the lasers, lights and explosions pop even more I added a very aggressive bloom to the renderer. At first I had I bug in my code that caused the light to leak in only the horizontal and vertical directions not diagonally. After fixing the issue we thought it looked worse, so we changed it back.&lt;/p&gt;

&lt;h4&gt;FXAA&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/portfolio/assets/images/Jackal%20Engine%20V1/FXAA.png&quot; alt=&quot;FXAA&quot; class=&quot;post_image&quot; /&gt;
With out deferred renderer we had a lot of aliasing on the edges of our objects. We wanted our game to look dreamy which meant that it didn’t matter that much if the edges looked soft. In our case FXAA was the perfect anti-aliasing method. It’s fast, easy to implement and the artifacts it creates fit our engine.&lt;/p&gt;

&lt;h4&gt;SSAO&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/portfolio/assets/images/Jackal%20Engine%20V1/SSAO.png&quot; alt=&quot;SSAO&quot; class=&quot;post_image&quot; /&gt;
I had some time left at the end of the block. In other games ambient occlusion always is a huge improvement in the visual quality of the game. So I wanted to give it a try.  I didn’t take long to get it to work. The effect wasn’t really visible in our test cases but that was expected.&lt;/p&gt;

&lt;h4&gt;Camera motion blur&lt;/h4&gt;
&lt;div class=&quot;video&quot;&gt;&lt;figure&gt;&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/WKjzYp4F2VY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;For the same reasons as why I implemented SSAO, except for the huge improvement in quality, I decided to implement camera based motion blur. It was easy to implement. Oh boy did it make us sick.&lt;/p&gt;</content><author><name></name></author><summary type="html">The assignment for my first block in my second year at IGAD was to create a game engine focused on a specific game genre.  We would be working together in groups of 4, all programmers. We picked 3D space RTS as our genre inspired by games such as Homeworld.</summary></entry><entry><title type="html">Robot Malfactory</title><link href="http://localhost:4000/portfolio/game%20project/team%20project/2017/11/22/RobotMalfactory.html" rel="alternate" type="text/html" title="Robot Malfactory" /><published>2017-11-22T17:49:00+01:00</published><updated>2017-11-22T17:49:00+01:00</updated><id>http://localhost:4000/portfolio/game%20project/team%20project/2017/11/22/RobotMalfactory</id><content type="html" xml:base="http://localhost:4000/portfolio/game%20project/team%20project/2017/11/22/RobotMalfactory.html">&lt;p&gt;The assignment for my fourth block at IGAD was to create a physics based puzzle game in Unity. The catch was that the project was not allowed to any of Unity’s built in physics components. We would be working in teams of 5. With people from multiple disciplines.&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;video&quot;&gt;&lt;figure&gt;&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/44nT4yy04D8&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;I was one of two programmers on the team. I programmed all physics in the game. We split the work but unfortunately his part didn’t work as well as expected. The art direction of the game changed multiple times during the block. After the last change our artists only had 2 weeks left to create assets for the game.&lt;/p&gt;

&lt;p&gt;The game is about a malfunctioning robot (player) in a warehouse. In this warehouse robots work together to stack and sort the packages. The malfunctioning robot is instead trying to do the exact opposite. With the use of future technology the gravitational direction of the packages in the warehouse has been changed. The goal of the game is to use the stacks of boxes to disrupt the workflow of the other robots.&lt;/p&gt;

&lt;h3&gt;My work&lt;/h3&gt;
&lt;h4&gt;Custom 2D physics system&lt;/h4&gt;
&lt;p&gt;As mentioned previously we weren’t allowed to use any of Unity’s built in physics components. I based our system on &lt;a href=&quot;https://github.com/erincatto/Box2D&quot;&gt;Box2D&lt;/a&gt;. Our physics system technically only supported rectangles and spheres. We could’ve supported any kind of convex shape using the same code used by the rectangles but we didn’t need it because of the design of the game.&lt;/p&gt;

&lt;h4&gt;Stack stability&lt;/h4&gt;
&lt;div class=&quot;video&quot;&gt;&lt;figure&gt;&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/H_4x4znJfCU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;With the first iteration of our physics system and even when using Unity’s physics system, stacking boxes turned out to be an issue. Because of precision errors in the code, if we would leave the game running for long enough a stack of boxes would eventually fall over. I found that the issue was that the system would often generate two hit points. One on the left and one on the right side of the box. Because one contact point would be resolved before the other the first would impact the second. This caused the boxes to shift slightly causing the instability. I solved the problem by merging the contact points under certain circumstances.&lt;/p&gt;

&lt;h4&gt;Distance constraints&lt;/h4&gt;
&lt;div class=&quot;video&quot;&gt;&lt;figure&gt;&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/yU7wPi7vvtI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;I added distance constraints so we could have ropes in our game. Design never ended up using them unfortunelty. They worked well though.&lt;/p&gt;</content><author><name></name></author><summary type="html">The assignment for my fourth block at IGAD was to create a physics based puzzle game in Unity. The catch was that the project was not allowed to any of Unity’s built in physics components. We would be working in teams of 5. With people from multiple disciplines.</summary></entry><entry><title type="html">GPU Generated terrain</title><link href="http://localhost:4000/portfolio/solo%20project/2017/11/22/GPUGeneratedTerrain.html" rel="alternate" type="text/html" title="GPU Generated terrain" /><published>2017-11-22T17:46:00+01:00</published><updated>2017-11-22T17:46:00+01:00</updated><id>http://localhost:4000/portfolio/solo%20project/2017/11/22/GPUGeneratedTerrain</id><content type="html" xml:base="http://localhost:4000/portfolio/solo%20project/2017/11/22/GPUGeneratedTerrain.html">&lt;p&gt;During a one week holiday I wanted to challenge myself. The only restriction I put on it was that I wanted to learn how to use the geometry shader stage. I found &lt;a href=&quot;https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch01.html&quot;&gt;this&lt;/a&gt;article in GPU gems 3 on how to procedurally generate terrain on the GPU.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;As with any one week project the end result was still very crude. But my main goal had been achieved. I learned how to program a geometry shader in GLSL. I learned a couple of other neat OpenGL features while working on it.&lt;/p&gt;
&lt;h3&gt;My work&lt;/h3&gt;
&lt;h4&gt;GPU marching cubes&lt;/h4&gt;
&lt;p&gt;The project uses marching cubes to output vertex data to a buffer as described in the article. I was using method 3.&lt;/p&gt;
&lt;h4&gt;Transform feedback &amp;amp; queries&lt;/h4&gt;
&lt;p&gt;The project uses transform feedback to output the vertices generated by the geometry shader to a buffer. Using queries I get the amount of vertices output to the buffer. Both of these OpenGL features were new to me.&lt;/p&gt;
&lt;h4&gt;Tri-planar texture mapping&lt;/h4&gt;
&lt;p&gt;I used tri-planar texture mapping to texture the generated terrain.&lt;/p&gt;</content><author><name></name></author><summary type="html">During a one week holiday I wanted to challenge myself. The only restriction I put on it was that I wanted to learn how to use the geometry shader stage. I found thisarticle in GPU gems 3 on how to procedurally generate terrain on the GPU.</summary></entry><entry><title type="html">Battleships++</title><link href="http://localhost:4000/portfolio/engine%20project/solo%20project/2017/11/22/Battleships++.html" rel="alternate" type="text/html" title="Battleships++" /><published>2017-11-22T17:26:00+01:00</published><updated>2017-11-22T17:26:00+01:00</updated><id>http://localhost:4000/portfolio/engine%20project/solo%20project/2017/11/22/Battleships++</id><content type="html" xml:base="http://localhost:4000/portfolio/engine%20project/solo%20project/2017/11/22/Battleships++.html">&lt;p&gt;The assignment for my third block at IGAD was to create a game based on the classic board game &lt;a href=&quot;https://en.wikipedia.org/wiki/Battleship_(game)&quot;&gt;Battleships&lt;/a&gt;. The main goal of the block was to teach us OpenGL and to teach us the basics of networking with &lt;a href=&quot;http://www.jenkinssoftware.com/&quot;&gt;RakNet&lt;/a&gt;. We would be working on the project alone but everyone would be using the same server. The rules of the game where dictated by the logic on the server.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;There were problems with the server from the start of the block. I started early creating my own OpenGL renderer. This meant that I had a lot of time to learn new graphics techniques and implement them. I didn’t start on gameplay or networking until most of the problems with the server were fixed. I still managed to implement most of the gameplay and networking logic but because of bugs in the server a game could never be played to completion.&lt;/p&gt;
&lt;h3&gt;My work&lt;/h3&gt;
&lt;h4&gt;Custom math library&lt;/h4&gt;
&lt;p&gt;The teachers wanted us to implement our own math library. By doing this I learned how to use cross and dot products, “read” matrices and use matrices to take a point from one space to another.&lt;/p&gt;

&lt;h4&gt;Deferred renderer&lt;/h4&gt;
&lt;p&gt;Early on I decided to go for a deferred renderer instead of a forward renderer. I only had one directional light in the game and I ended up also implementing a forward rendering pass for all the transparent objects I had in the game. It might not have been the best decision but I still learned a lot from doing it.&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;https://www.cs.bgu.ac.il/~grinshpo/PersistentGridMapping.pdf&quot;&gt;Persistant grid mapping for ocean rendering&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/portfolio/assets/images/Battleships++/Persistant%20grid.png&quot; alt=&quot;PersistantGrid&quot; class=&quot;post_image&quot; /&gt;
I found this paper a couple of weeks before the start of the block. I was very interested. When we got the the assignment I immediately knew I wanted to try it out. I used it to render the ocean in my game. This was the first time I ever had problems with floating point precision. It took quite a lot of debugging but the end result was acceptable.&lt;/p&gt;

&lt;h4&gt;Cascaded shadow mapping&lt;/h4&gt;
&lt;!-- Jekyll Ideal Image Slider Include --&gt;
&lt;!-- https://github.com/jekylltools/jekyll-ideal-image-slider-include --&gt;
&lt;!-- v1.8 --&gt;
&lt;div id=&quot;battleships_images&quot; class=&quot;image_slider&quot;&gt;
  &lt;img data-src=&quot;&quot; data-src-2x=&quot;&quot; src=&quot;/portfolio/assets/images/Battleships++/Battleships++.png&quot; title=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;&quot; data-src-2x=&quot;&quot; src=&quot;/portfolio/assets/images/Battleships++/PCF.png&quot; title=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;/div&gt;
&lt;p&gt;The first time I implemented shadow mapping was also the first time I implemented cascaded shadow mapping. Because of the large draw distances in my game normal shadow maps wouldn’t cut it. With all light in the scene coming from a directional light it was an easy decision to go for cascaded shadow mapping. The further improve the result I also implemented PCF soft shadows.&lt;/p&gt;

&lt;h4&gt;Screen space reflections&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/portfolio/assets/images/Battleships++/screen%20space%20reflections.png&quot; alt=&quot;Screen Space Reflections&quot; class=&quot;post_image&quot; /&gt;
My implementation had a lot of artifacts and was very slow but it did work. It made the ships look like as if they were in the water and not on top.&lt;/p&gt;

&lt;h4&gt;Particle effects&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/portfolio/assets/images/Battleships++/particle%20effects.png&quot; alt=&quot;Particle effects&quot; class=&quot;post_image&quot; /&gt;
This was also my first time implementing particle systems. I learned important basics such as that transparent objects have to be rendered back to front and how to make a quad always face the camera.&lt;/p&gt;

&lt;h4&gt;RakNet&lt;/h4&gt;
&lt;p&gt;This was my first time doing any networking. RakNet made it very easy to get a simple game up and running. To bad we had server problems. Otherwise I’m sure I could have had a working game.&lt;/p&gt;</content><author><name></name></author><summary type="html">The assignment for my third block at IGAD was to create a game based on the classic board game Battleships. The main goal of the block was to teach us OpenGL and to teach us the basics of networking with RakNet. We would be working on the project alone but everyone would be using the same server. The rules of the game where dictated by the logic on the server.</summary></entry><entry><title type="html">Alienate</title><link href="http://localhost:4000/portfolio/game%20project/team%20project/2017/11/22/Alienate.html" rel="alternate" type="text/html" title="Alienate" /><published>2017-11-22T17:16:00+01:00</published><updated>2017-11-22T17:16:00+01:00</updated><id>http://localhost:4000/portfolio/game%20project/team%20project/2017/11/22/Alienate</id><content type="html" xml:base="http://localhost:4000/portfolio/game%20project/team%20project/2017/11/22/Alienate.html">&lt;p&gt;The assignment for my second block at IGAD was to pick any game from the 80’s and make a modern day clone of it. We would be working in groups of 8. With people from multiple disciplines. We picked &lt;a href=&quot;https://en.wikipedia.org/wiki/Alien_8&quot;&gt;Alien 8&lt;/a&gt; as our game.&lt;/p&gt;

&lt;!--more--&gt;

&lt;div class=&quot;video&quot;&gt;&lt;figure&gt;&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/ensKaOJQ1uY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;I was one of three programmers on the team. Since I was the only one with prior experience working with Unity and one of the more experienced programmers my responsibilities were all over the place. I helped with all Unity related problems. I programmed the player movement, the camera and most of the gameplay elements found in the game. I made tools for the designers could use to more rapidly create new rooms. I wrote shaders for additional graphical effects. Finally, I was the guy doing most of the bug-fixing. It was a very busy block.&lt;/p&gt;
&lt;h3&gt;My work&lt;/h3&gt;
&lt;h4&gt;Player movement&lt;/h4&gt;
&lt;p&gt;We went through a lot of iterations for the player movement. We tried free movement and grid based movement. Both with any combination of in-air direction changes, double jumps, variable and fixed jump distance and many more.&lt;/p&gt;
&lt;h4&gt;Shaders&lt;/h4&gt;
&lt;p&gt;The artists wanted the room to look clean and shiny. To accomplish this I wrote the necessary shaders and scripts to create clean and accurate reflections on the floor.&lt;/p&gt;
&lt;h4&gt;Gameplay elements&lt;/h4&gt;
&lt;p&gt;The moving/disappearing blocks, the drone, the spikes, the enemies and the picking up and placing of blocks were programmed by me.&lt;/p&gt;
&lt;h4&gt;Camera&lt;/h4&gt;
&lt;p&gt;Early in development we had rooms of variable sizes and shapes. I wrote a script that would move the camera to the right place and zoom in/out based on the players position in the room.&lt;/p&gt;
&lt;h4&gt;Room generation&lt;/h4&gt;
&lt;p&gt;I created a tool for the designers that would automatically place the right models and colliders to create a functioning room. They decided the height of the walls and the locations of the doors and the script did the rest.&lt;/p&gt;</content><author><name></name></author><summary type="html">The assignment for my second block at IGAD was to pick any game from the 80’s and make a modern day clone of it. We would be working in groups of 8. With people from multiple disciplines. We picked Alien 8 as our game.</summary></entry></feed>